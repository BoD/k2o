/*
 * This source is part of the
 *      _____  ___   ____
 *  __ / / _ \/ _ | / __/___  _______ _
 * / // / , _/ __ |/ _/_/ _ \/ __/ _ `/
 * \___/_/|_/_/ |_/_/ (_)___/_/  \_, /
 *                              /___/
 * repository.
 *
 * Copyright (C) 2025-present Benoit 'BoD' Lubek (BoD@JRAF.org)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.jraf.k2o.dsl

import androidx.compose.runtime.AbstractApplier
import androidx.compose.runtime.Composable
import androidx.compose.runtime.CompositionLocalProvider
import androidx.compose.runtime.ControlledComposition
import androidx.compose.runtime.ProvidableCompositionLocal
import androidx.compose.runtime.Recomposer
import androidx.compose.runtime.staticCompositionLocalOf
import kotlinx.io.Sink
import kotlinx.io.writeString
import org.jraf.k2o.VERSION
import org.jraf.k2o.dsl.OpenScad.Element
import org.jraf.k2o.dsl.OpenScad.NewLineElement
import org.jraf.k2o.formatting.formatted
import kotlin.coroutines.EmptyCoroutineContext

class OpenScad {
  private val elements = mutableListOf<Element>()

  fun add(element: Element) {
    elements.add(element)
  }

  fun write(sink: Sink) {
    var indent = 0
    for ((i, element) in elements.withIndex()) {
      when (element) {
        is Indent -> indent++
        is Unindent -> indent--
      }
      check(indent >= 0) { "Tried to unindent more than indented" }
      if (element is NewLineElement && i > 0) {
        sink.writeString("\n")
        repeat(indent) {
          sink.writeString("  ")
        }
      }
      sink.writeString(element.content)
    }
  }

  interface Element {
    val content: String
  }

  /**
   * Marker interface for elements that will start a new line when written.
   */
  interface NewLineElement : Element
}

private object Indent : Element {
  // No content, just a marker for indentation
  override val content = ""
}

@Composable
fun Indent() {
  LocalOpenScad.current.add(Indent)
}

private object Unindent : Element {
  // No output, just a marker for unindenting
  override val content = ""
}

@Composable
fun Unindent() {
  LocalOpenScad.current.add(Unindent)
}

private class TextElement(override val content: String) : Element

@Composable
fun Text(content: String) {
  LocalOpenScad.current.add(TextElement(content))
}

private class LineElement(override val content: String) : NewLineElement

@Composable
fun Line(content: String) {
  LocalOpenScad.current.add(LineElement(content))
}

@Composable
fun withBraces(content: @Composable () -> Unit) {
  with(LocalOpenScad.current) {
    Text(" {")
    Indent()
    content()
    Unindent()
    Line("}")
  }
}

fun openScad(
  sink: Sink,
  fa: Double = 0.1,
  fs: Double = 0.1,
  content: @Composable () -> Unit,
) {
  val openScad = OpenScad()
  ControlledComposition(NoOpApplier(), Recomposer(EmptyCoroutineContext)).setContent {
    CompositionLocalProvider(LocalOpenScad provides openScad) {
      Line("// Generated by k2o $VERSION")
      Line($$"$fa = $${fa.formatted()};")
      Line($$"$fs = $${fs.formatted()};")
      Line("")
      content()
    }
  }
  openScad.write(sink)
  sink.flush()
}

private class NoOpApplier : AbstractApplier<Unit>(Unit) {
  override fun insertTopDown(index: Int, instance: Unit) {}
  override fun insertBottomUp(index: Int, instance: Unit) {}
  override fun remove(index: Int, count: Int) {}
  override fun move(from: Int, to: Int, count: Int) {}
  override fun onClear() {}
}

val LocalOpenScad: ProvidableCompositionLocal<OpenScad> = staticCompositionLocalOf { OpenScad() }
