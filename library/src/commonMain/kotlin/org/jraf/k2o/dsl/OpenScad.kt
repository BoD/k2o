/*
 * This source is part of the
 *      _____  ___   ____
 *  __ / / _ \/ _ | / __/___  _______ _
 * / // / , _/ __ |/ _/_/ _ \/ __/ _ `/
 * \___/_/|_/_/ |_/_/ (_)___/_/  \_, /
 *                              /___/
 * repository.
 *
 * Copyright (C) 2025-present Benoit 'BoD' Lubek (BoD@JRAF.org)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.jraf.k2o.dsl

import kotlinx.io.Sink
import kotlinx.io.writeString
import org.jraf.k2o.VERSION
import org.jraf.k2o.dsl.OpenScad.Element
import org.jraf.k2o.dsl.OpenScad.NewLineElement

class OpenScad {
  private val elements = mutableListOf<Element>()

  fun add(element: Element) {
    elements.add(element)
  }

  fun write(sink: Sink) {
    var indent = 0
    for ((i, element) in elements.withIndex()) {
      when (element) {
        is Indent -> indent++
        is Unindent -> indent--
      }
      check(indent >= 0) { "Tried to unindent more than indented" }
      if (element is NewLineElement && i > 0) {
        sink.writeString("\n")
        repeat(indent) {
          sink.writeString("  ")
        }
      }
      sink.writeString(element.content)
    }
  }

  interface Element {
    val content: String
  }

  /**
   * Marker interface for elements that will start a new line when written.
   */
  interface NewLineElement : Element

}

private object Indent : Element {
  // No content, just a marker for indentation
  override val content = ""
}

fun OpenScad.indent(): OpenScad = apply {
  add(Indent)
}

private object Unindent : Element {
  // No output, just a marker for unindenting
  override val content = ""
}

fun OpenScad.unindent(): OpenScad = apply {
  add(Unindent)
}

private class SimpleElement(override val content: String) : Element
private class SimpleNewLineElement(override val content: String) : NewLineElement

fun OpenScad.add(content: String) {
  add(SimpleElement(content))
}

fun OpenScad.addLine(content: String) {
  add(SimpleNewLineElement(content))
}

fun OpenScad.withBraces(block: OpenScad.() -> Unit): OpenScad = apply {
  add(" {")
  indent()
  block()
  unindent()
  addLine("}")
}

fun writeOpenScad(sink: Sink, block: OpenScad.() -> Unit) {
  OpenScad().apply {
    addLine("// Generated by k2o $VERSION")
    addLine($$"$fa = .1;")
    addLine($$"$fs = .1;")
    addLine("")
    block()
    write(sink)
  }
  sink.flush()
}
